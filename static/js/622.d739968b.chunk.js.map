{"version":3,"file":"static/js/622.d739968b.chunk.js","mappings":"6OAAaA,EAAmB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAExBC,EAAoB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,E,SC2DtC,EAxDoB,WAClB,OAAgCC,EAAAA,EAAAA,UAAS,CAAEC,KAAM,GAAIC,MAAO,KAA5D,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,CAAEC,KAAM,GAAIC,MAAO,KAAhE,eAAOG,EAAP,KAAmBC,EAAnB,KACMV,GAAWW,EAAAA,EAAAA,IAAYb,GACvBc,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,MACdT,GAAY,SAAAU,GAAY,yBAAUA,GAAV,cAAyBb,EAAOY,GAAhC,IACxBP,GAAc,SAAAS,GAAc,yBAAUA,GAAV,cAA2Bd,EAAO,IAAlC,GAC7B,EAiBD,OACE,kBAAMe,SAhBa,SAAAL,GACnBA,EAAMM,iBAEN,IAAcC,EAAmBf,EAAzBF,KAAeC,EAAUC,EAAVD,MAEnBN,EAASuB,MAAK,gBAAGlB,EAAH,EAAGA,KAAH,OAAciB,IAAYjB,CAA1B,IAChBmB,MAAM,GAAD,OAAIF,EAAJ,6BAIPV,GAASa,EAAAA,EAAAA,IAAgB,CAAEpB,KAAMiB,EAAShB,MAAOA,EAAMoB,cAEvDlB,EAAY,CAAEH,KAAM,GAAIC,MAAO,KAChC,EAG+BqB,aAAa,MAA3C,WACE,6BAAO,QAEL,kBACEC,KAAK,OACLvB,KAAK,OACLY,MAAOV,EAASF,KAChBwB,SAAUf,OAGbL,EAAWJ,OAAQ,0BAAOI,EAAWJ,QAEtC,6BAAO,UAEL,kBACEuB,KAAK,OACLvB,KAAK,QACLY,MAAOV,EAASD,MAChBuB,SAAUf,OAIbL,EAAWH,QAAS,0BAAOG,EAAWH,SACvC,mBAAQsB,KAAK,SAAb,SAAsB,kBAG3B,ECvDYE,EAAc,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAI1B,EAAmB,EAAnBA,KAAM2B,EAAa,EAAbA,OAChCpB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,0BACGR,EAAK,KAAG2B,GACT,mBAAQJ,KAAK,SAASK,QAPL,SAAAlB,GACnBH,GAASsB,EAAAA,EAAAA,IAAmBH,GAC7B,EAKG,SAA6C,aAKlD,ECnBYI,EAAiB,SAAApC,GAAK,OAAIA,EAAMqC,MAAV,EC0BnC,MApBA,WACE,IAAMpC,GAAWW,EAAAA,EAAAA,IAAYb,GACvBsC,GAASzB,EAAAA,EAAAA,IAAYwB,GAErBE,EAAkBrC,EAASoC,QAAO,qBAAG/B,KACpCiC,cAAcC,SAASH,EAAOE,cADG,IAIxC,OACE,8BACGtC,EAASwC,OAAS,GACjBH,EAAgBI,KAAI,YAA0B,IAAvBV,EAAsB,EAAtBA,GAAI1B,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC/B,OACE,SAACwB,EAAD,CAA8BC,GAAIA,EAAI1B,KAAMA,EAAM2B,OAAQ1B,GAAxCoC,OAAOX,GAE5B,KAGR,E,iBCLD,MAfA,WACE,IAAMnB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,iCACE,kBAAO8B,QAAQ,GAAf,SAAkB,2BAClB,kBAAOf,KAAK,OAAOG,GAAG,eAAeF,SAPd,SAAAd,GACzBH,GAASgC,EAAAA,EAAAA,IAAgB7B,EAAMC,OAAOC,OACvC,MAQF,ECoBD,EA5BiB,WACf,IAAML,GAAWC,EAAAA,EAAAA,MACXgC,GAAOlC,EAAAA,EAAAA,KAAY,SAAAZ,GAAK,OAAIA,EAAM8C,KAAKC,KAAf,IACxB3C,GAAYQ,EAAAA,EAAAA,IAAYT,GAQ9B,OANA6C,EAAAA,EAAAA,YAAU,WACJF,GACFjC,GAASoC,EAAAA,EAAAA,MAEZ,GAAE,CAACH,EAAMjC,KAGR,8BACGT,GACC,SAAC8C,EAAA,EAAD,KAEA,iCACE,wBAAI,eACJ,SAAC,EAAD,KACA,SAAC,EAAD,KACA,wBAAI,cACJ,SAAC,EAAD,QAKT,C","sources":["redux/contacts/selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem/ContactItem.jsx","redux/filter/selectors.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const contactsSelector = state => state.contacts.items;\n\nexport const isLoadingSelector = state => state.contacts.isLoading;\n\nexport const contactsErrorSelector = state => state.contacts.error;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from '../../redux/contacts/operations';\nimport { contactsSelector } from '../../redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const [formData, setFormData] = useState({ name: '', phone: '' });\n  const [formErrors, setFormErrors] = useState({ name: '', phone: '' });\n  const contacts = useSelector(contactsSelector);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value }));\n    setFormErrors(prevFormErrors => ({ ...prevFormErrors, [name]: '' }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const { name: newName, phone } = formData;\n\n    if (contacts.some(({ name }) => newName === name)) {\n      alert(`${newName} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContactThunk({ name: newName, phone: phone.toString() }));\n\n    setFormData({ name: '', phone: '' });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n        />\n      </label>\n      {formErrors.name && <span>{formErrors.name}</span>}\n\n      <label>\n        Number\n        <input\n          type=\"text\"\n          name=\"phone\"\n          value={formData.phone}\n          onChange={handleChange}\n        />\n      </label>\n\n      {formErrors.phone && <span>{formErrors.phone}</span>}\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from '../../../redux/contacts/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = event => {\n    dispatch(deleteContactThunk(id));\n  };\n\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"button\" onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","export const filterSelector = state => state.filter;\n","import React from 'react';\nimport { ContactItem } from './ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { contactsSelector } from '../../redux/contacts/selectors';\nimport { filterSelector } from '../../redux/filter/selectors';\n\nfunction ContactList() {\n  const contacts = useSelector(contactsSelector);\n  const filter = useSelector(filterSelector);\n\n  const currentContacts = contacts.filter(({ name }) =>\n    name.toUpperCase().includes(filter.toUpperCase())\n  );\n\n  return (\n    <>\n      {contacts.length > 0 &&\n        currentContacts.map(({ id, name, phone }) => {\n          return (\n            <ContactItem key={Number(id)} id={id} name={name} number={phone} />\n          );\n        })}\n    </>\n  );\n}\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setStatusFilter } from '../../redux/filter/filterSlice';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    dispatch(setStatusFilter(event.target.value));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"\">Find contacts by name</label>\n      <input type=\"text\" id=\"findContacts\" onChange={handleFilterChange} />\n    </>\n  );\n}\n\nexport default Filter;\n","import ContactForm from '../../components/ContactForm/ContactForm';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsThunk } from 'redux/contacts/operations';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { isLoadingSelector } from 'redux/contacts/selectors';\nimport Loader from '../../components/Loader/Loader';\nimport Filter from '../../components/Filter/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth.token);\n  const isLoading = useSelector(isLoadingSelector);\n\n  useEffect(() => {\n    if (auth) {\n      dispatch(fetchContactsThunk());\n    }\n  }, [auth, dispatch]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <h1>Phonebook</h1>\n          <ContactForm />\n          <Filter />\n          <h2>Contacts</h2>\n          <ContactList />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["contactsSelector","state","contacts","items","isLoadingSelector","isLoading","useState","name","phone","formData","setFormData","formErrors","setFormErrors","useSelector","dispatch","useDispatch","handleChange","event","target","value","prevFormData","prevFormErrors","onSubmit","preventDefault","newName","some","alert","addContactThunk","toString","autoComplete","type","onChange","ContactItem","id","number","onClick","deleteContactThunk","filterSelector","filter","currentContacts","toUpperCase","includes","length","map","Number","htmlFor","setStatusFilter","auth","token","useEffect","fetchContactsThunk","Loader"],"sourceRoot":""}
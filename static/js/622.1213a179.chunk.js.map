{"version":3,"file":"static/js/622.1213a179.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem/ContactItem.jsx","redux/filter/selectors.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const contactsSelector = state => state.contacts.items;\n\nexport const isLoadingSelector = state => state.contacts.isLoading;\n\nexport const contactsErrorSelector = state => state.contacts.error;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from '../../redux/contacts/operations';\nimport { contactsSelector } from '../../redux/contacts/selectors';\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst ContactForm = () => {\n  const contacts = useSelector(contactsSelector);\n  const dispatch = useDispatch();\n\n  const [formValues, setFormValues] = useState({\n    name: '',\n    phone: '',\n  });\n\n  const [formErrors, setFormErrors] = useState({\n    name: '',\n    phone: '',\n  });\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormValues({\n      ...formValues,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { name, phone } = formValues;\n\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    if (!name || !phone) {\n      setFormErrors({\n        name: name ? '' : 'Name should not be empty',\n        phone: phone ? '' : 'Phone number should not be empty',\n      });\n      return;\n    }\n\n    if (!phoneRegExp.test(phone)) {\n      setFormErrors({\n        ...formErrors,\n        phone: 'Phone number is not valid',\n      });\n      return;\n    }\n\n    dispatch(addContactThunk({ name, number: phone.toString() }));\n    setFormValues({ name: '', phone: '' });\n  };\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleSubmit}>\n      <div>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={formValues.name}\n            onChange={handleChange}\n          />\n          {formErrors.name && <span>{formErrors.name}</span>}\n        </label>\n      </div>\n\n      <div>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"phone\"\n            value={formValues.phone}\n            onChange={handleChange}\n          />\n          {formErrors.phone && <span>{formErrors.phone}</span>}\n        </label>\n      </div>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from '../../../redux/contacts/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = event => {\n    dispatch(deleteContactThunk(id));\n  };\n\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"button\" onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","export const filterSelector = state => state.filter;\n","import React from 'react';\nimport { ContactItem } from './ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { contactsSelector } from '../../redux/contacts/selectors';\nimport { filterSelector } from '../../redux/filter/selectors';\n\nfunction ContactList() {\n  const contacts = useSelector(contactsSelector);\n  const filter = useSelector(filterSelector);\n\n  const currentContacts = contacts.filter(({ name }) =>\n    name.toUpperCase().includes(filter.toUpperCase())\n  );\n\n  return (\n    <>\n      {contacts.length > 0 &&\n        currentContacts.map(({ id, name, phone }) => {\n          return (\n            <ContactItem key={Number(id)} id={id} name={name} number={phone} />\n          );\n        })}\n    </>\n  );\n}\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setStatusFilter } from '../../redux/filter/filterSlice';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    dispatch(setStatusFilter(event.target.value));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"\">Find contacts by name</label>\n      <input type=\"text\" id=\"findContacts\" onChange={handleFilterChange} />\n    </>\n  );\n}\n\nexport default Filter;\n","import ContactForm from '../../components/ContactForm/ContactForm';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsThunk } from 'redux/contacts/operations';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { isLoadingSelector } from 'redux/contacts/selectors';\nimport Loader from '../../components/Loader/Loader';\nimport Filter from '../../components/Filter/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const auth = useSelector(state => state.auth.token);\n  const isLoading = useSelector(isLoadingSelector);\n\n  useEffect(() => {\n    if (auth) {\n      dispatch(fetchContactsThunk());\n    }\n  }, [auth, dispatch]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <h1>Phonebook</h1>\n          <ContactForm />\n          <Filter />\n          <h2>Contacts</h2>\n          <ContactList />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["contactsSelector","state","contacts","items","isLoadingSelector","isLoading","phoneRegExp","useSelector","dispatch","useDispatch","useState","name","phone","formValues","setFormValues","formErrors","setFormErrors","handleChange","e","target","value","autoComplete","onSubmit","preventDefault","some","contact","alert","test","addContactThunk","number","toString","type","onChange","ContactItem","id","onClick","event","deleteContactThunk","filterSelector","filter","currentContacts","toUpperCase","includes","length","map","Number","htmlFor","setStatusFilter","auth","token","useEffect","fetchContactsThunk","Loader"],"sourceRoot":""}